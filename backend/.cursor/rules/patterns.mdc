# Backend Patterns

## Pydantic V2
- Use `@field_validator` decorators (not deprecated `@validator`)
- Define request/response models in router files

## Database Models
- All models in `backend/db_models.py` using SQLModel
- Use PascalCase for table names, snake_case for columns
- Include audit trails for data changes

## API Patterns
- Return class objects from business logic, convert to dicts only at router layer
- Use dependency injection for external clients
- Use `get_current_user` for protected endpoints, `get_optional_user` for optional auth

## Testing
- Use dependency overrides with explicit pre-defined general-purpose mock clients
- Use temporary PostgreSQL database for integration tests
- Test both success and error scenarios

## Error Handling
- Use specific HTTP status codes (400, 401, 404, 422, 500)
- Return structured error responses with meaningful messages
description:
globs:
alwaysApply: true
---
