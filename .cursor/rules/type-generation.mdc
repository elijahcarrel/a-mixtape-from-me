# Type Generation and Auto-Generation Workflow

## Overview
This project uses a sophisticated auto-generation system to maintain type safety across the full stack:
1. SQLModel models → Database schema
2. FastAPI → OpenAPI specification
3. OpenAPI → TypeScript types

## Generation Commands
```bash
# Generate database schema from SQLModel
npm run gen-db-schema-from-sqlmodels

# Generate OpenAPI spec from FastAPI
npm run gen-openapi-from-fastapi

# Generate TypeScript types from OpenAPI
npm run gen-ts-from-openapi

# Generate all artifacts
npm run gen-all
```

## File Locations
- **Database Models**: `backend/db_models.py` (source)
- **Database Schema**: `schema.gen.sql` (generated)
- **OpenAPI Spec**: `openapi.gen.json` (generated)
- **TypeScript Types**: `app/client/` (generated)

## Workflow for Changes
1. **Database Changes**: Update models in `backend/db_models.py`
2. **API Changes**: Update FastAPI routers and models
3. **Regenerate**: Run `npm run gen-all`
4. **Commit**: Include generated files in commits

## Generated Files
- `schema.gen.sql`: PostgreSQL schema generated from SQLModel
- `openapi.gen.json`: OpenAPI 3.1.0 specification from FastAPI
- `app/client/types.gen.ts`: TypeScript interfaces from OpenAPI
- `app/client/sdk.gen.ts`: TypeScript SDK client from OpenAPI

## Important Notes
- **Never edit generated files directly** - they will be overwritten
- **Always run generation after model changes**
- **Include generated files in version control**
- **Generated types are the source of truth** for frontend-backend contracts

## TypeScript Usage
```typescript
// Import generated types
import { MixtapeResponse, MixtapeTrackRequest } from '../client';

// Use in components
const mixtape: MixtapeResponse = await api.getMixtape(publicId);
```

## Configuration Files
- `openapi-ts.config.ts`: Configuration for TypeScript generation
- `scripts/generate_openapi_spec.py`: FastAPI to OpenAPI generation
- `scripts/generate_schema.py`: SQLModel to SQL generation
description:
globs:
alwaysApply: false
---
