# Backend Development Patterns

## FastAPI Conventions
- Use Pydantic V2 with `@field_validator` decorators (not deprecated `@validator`)
- Define request/response models in router files
- Use dependency injection for database sessions and external clients
- Return class objects from business logic, convert to dicts only at router layer
- Use proper HTTP status codes and error handling

## Database Models (SQLModel)
- All models defined in `backend/db_models.py`
- Use SQLModel with proper table relationships
- Include audit trails for data changes
- Use appropriate indexes for performance
- Follow naming conventions: PascalCase for table names

## Pydantic Validation
```python
# Good - Pydantic V2 style
from pydantic import BaseModel, Field, field_validator

class MixtapeRequest(BaseModel):
    name: str = Field(..., min_length=1, max_length=255)
    
    @field_validator('tracks')
    @classmethod
    def unique_track_positions(cls, v):
        # validation logic
        return v
```

## API Response Patterns
- Return structured responses with proper typing
- Use FastAPI's automatic response model validation
- Include error details in HTTP exceptions
- Document endpoints with clear descriptions

## Testing Patterns
- Use pytest for backend testing
- Use dependency injection for external services (Spotify client), using explicit pre-defined general-purpose mock clients rather than monkeypatched test-specific clients
- Test both success and error scenarios
- Use temporary PostgreSQL database for integration tests

## Code Generation
- Database schema auto-generated from SQLModel using `scripts/generate_schema.py`
- OpenAPI spec auto-generated from FastAPI using `scripts/generate_openapi_spec.py`
- Run `npm run gen-all` to regenerate all artifacts
description:
globs:
alwaysApply: false
---
