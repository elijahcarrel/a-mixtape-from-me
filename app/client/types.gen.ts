// This file is auto-generated by @hey-api/openapi-ts

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * MixtapeOverview
 */
export type MixtapeOverview = {
    /**
     * Public Id
     */
    public_id: string;
    /**
     * Name
     */
    name: string;
    /**
     * Last Modified Time
     */
    last_modified_time: string;
};

/**
 * MixtapeRequest
 */
export type MixtapeRequest = {
    /**
     * Name
     * Human-readable name of the mixtape
     */
    name: string;
    /**
     * Intro Text
     * Optional intro text
     */
    intro_text?: string | null;
    /**
     * Subtitle1
     * First subtitle line (max 60 characters)
     */
    subtitle1?: string | null;
    /**
     * Subtitle2
     * Second subtitle line (max 60 characters)
     */
    subtitle2?: string | null;
    /**
     * Subtitle3
     * Third subtitle line (max 60 characters)
     */
    subtitle3?: string | null;
    /**
     * Is Public
     * Whether the mixtape is public
     */
    is_public?: boolean;
    /**
     * Tracks
     * List of tracks in the mixtape
     */
    tracks: Array<MixtapeTrackRequest>;
};

/**
 * MixtapeResponse
 */
export type MixtapeResponse = {
    /**
     * Public Id
     */
    public_id: string;
    /**
     * Name
     */
    name: string;
    /**
     * Intro Text
     */
    intro_text: string | null;
    /**
     * Subtitle1
     */
    subtitle1: string | null;
    /**
     * Subtitle2
     */
    subtitle2: string | null;
    /**
     * Subtitle3
     */
    subtitle3: string | null;
    /**
     * Is Public
     */
    is_public: boolean;
    /**
     * Create Time
     */
    create_time: string;
    /**
     * Last Modified Time
     */
    last_modified_time: string;
    /**
     * Stack Auth User Id
     */
    stack_auth_user_id: string | null;
    /**
     * Tracks
     */
    tracks: Array<MixtapeTrackResponse>;
    /**
     * Can Undo
     * Whether this mixtape can be undone
     */
    can_undo: boolean;
    /**
     * Can Redo
     * Whether this mixtape can be redone
     */
    can_redo: boolean;
};

/**
 * MixtapeTrackRequest
 */
export type MixtapeTrackRequest = {
    /**
     * Track Position
     * Unique position of the track within the mixtape (1-based index)
     */
    track_position: number;
    /**
     * Track Text
     * Optional text to display next to the track
     */
    track_text?: string | null;
    /**
     * Spotify Uri
     * Spotify URI of the track
     */
    spotify_uri: string;
};

/**
 * MixtapeTrackResponse
 */
export type MixtapeTrackResponse = {
    /**
     * Track Position
     * Unique position of the track within the mixtape (1-based index)
     */
    track_position: number;
    /**
     * Track Text
     * Optional text to display next to the track
     */
    track_text?: string | null;
    /**
     * Details about the track, such as name, artist, and Spotify URI.
     */
    track: TrackDetails;
};

/**
 * TrackAlbum
 */
export type TrackAlbum = {
    /**
     * Name
     */
    name: string;
    /**
     * Images
     */
    images: Array<TrackAlbumImage>;
};

/**
 * TrackAlbumImage
 */
export type TrackAlbumImage = {
    /**
     * Url
     */
    url: string;
    /**
     * Width
     */
    width: number;
    /**
     * Height
     */
    height: number;
};

/**
 * TrackArtist
 */
export type TrackArtist = {
    /**
     * Name
     */
    name: string;
};

/**
 * TrackDetails
 */
export type TrackDetails = {
    /**
     * Id
     */
    id: string;
    /**
     * Name
     */
    name: string;
    /**
     * Artists
     */
    artists: Array<TrackArtist>;
    album: TrackAlbum;
    /**
     * Uri
     */
    uri: string;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type GetCurrentUserApiAuthMeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/me';
};

export type GetCurrentUserApiAuthMeGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type LogoutApiAuthLogoutPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/logout';
};

export type LogoutApiAuthLogoutPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type VerifyTokenApiAuthVerifyGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/verify';
};

export type VerifyTokenApiAuthVerifyGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetAccountApiAccountMeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/account/me';
};

export type GetAccountApiAccountMeGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DbApiHealthDbGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/health/db';
};

export type DbApiHealthDbGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AppHealthApiHealthAppGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/health/app';
};

export type AppHealthApiHealthAppGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type SearchTracksApiSpotifySearchGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Query
         */
        query: string;
    };
    url: '/api/spotify/search';
};

export type SearchTracksApiSpotifySearchGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SearchTracksApiSpotifySearchGetError = SearchTracksApiSpotifySearchGetErrors[keyof SearchTracksApiSpotifySearchGetErrors];

export type SearchTracksApiSpotifySearchGetResponses = {
    /**
     * Response Search Tracks Api Spotify Search Get
     * Successful Response
     */
    200: Array<TrackDetails>;
};

export type SearchTracksApiSpotifySearchGetResponse = SearchTracksApiSpotifySearchGetResponses[keyof SearchTracksApiSpotifySearchGetResponses];

export type GetTrackApiSpotifyTrackTrackIdGetData = {
    body?: never;
    path: {
        /**
         * Track Id
         */
        track_id: string;
    };
    query?: never;
    url: '/api/spotify/track/{track_id}';
};

export type GetTrackApiSpotifyTrackTrackIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTrackApiSpotifyTrackTrackIdGetError = GetTrackApiSpotifyTrackTrackIdGetErrors[keyof GetTrackApiSpotifyTrackTrackIdGetErrors];

export type GetTrackApiSpotifyTrackTrackIdGetResponses = {
    /**
     * Successful Response
     */
    200: TrackDetails;
};

export type GetTrackApiSpotifyTrackTrackIdGetResponse = GetTrackApiSpotifyTrackTrackIdGetResponses[keyof GetTrackApiSpotifyTrackTrackIdGetResponses];

export type ListMyMixtapesApiMixtapeGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Q
         * Search mixtape titles (partial match)
         */
        q?: string | null;
        /**
         * Limit
         * Max results to return
         */
        limit?: number;
        /**
         * Offset
         * Results offset for pagination
         */
        offset?: number;
    };
    url: '/api/mixtape';
};

export type ListMyMixtapesApiMixtapeGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListMyMixtapesApiMixtapeGetError = ListMyMixtapesApiMixtapeGetErrors[keyof ListMyMixtapesApiMixtapeGetErrors];

export type ListMyMixtapesApiMixtapeGetResponses = {
    /**
     * Response List My Mixtapes Api Mixtape Get
     * Successful Response
     */
    200: Array<MixtapeOverview>;
};

export type ListMyMixtapesApiMixtapeGetResponse = ListMyMixtapesApiMixtapeGetResponses[keyof ListMyMixtapesApiMixtapeGetResponses];

export type CreateMixtapeApiMixtapePostData = {
    body: MixtapeRequest;
    path?: never;
    query?: never;
    url: '/api/mixtape';
};

export type CreateMixtapeApiMixtapePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateMixtapeApiMixtapePostError = CreateMixtapeApiMixtapePostErrors[keyof CreateMixtapeApiMixtapePostErrors];

export type CreateMixtapeApiMixtapePostResponses = {
    /**
     * Response Create Mixtape Api Mixtape Post
     * Successful Response
     */
    201: {
        [key: string]: unknown;
    };
};

export type CreateMixtapeApiMixtapePostResponse = CreateMixtapeApiMixtapePostResponses[keyof CreateMixtapeApiMixtapePostResponses];

export type ClaimMixtapeApiMixtapePublicIdClaimPostData = {
    body?: never;
    path: {
        /**
         * Public Id
         */
        public_id: string;
    };
    query?: never;
    url: '/api/mixtape/{public_id}/claim';
};

export type ClaimMixtapeApiMixtapePublicIdClaimPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ClaimMixtapeApiMixtapePublicIdClaimPostError = ClaimMixtapeApiMixtapePublicIdClaimPostErrors[keyof ClaimMixtapeApiMixtapePublicIdClaimPostErrors];

export type ClaimMixtapeApiMixtapePublicIdClaimPostResponses = {
    /**
     * Response Claim Mixtape Api Mixtape  Public Id  Claim Post
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type ClaimMixtapeApiMixtapePublicIdClaimPostResponse = ClaimMixtapeApiMixtapePublicIdClaimPostResponses[keyof ClaimMixtapeApiMixtapePublicIdClaimPostResponses];

export type GetMixtapeApiMixtapePublicIdGetData = {
    body?: never;
    path: {
        /**
         * Public Id
         */
        public_id: string;
    };
    query?: never;
    url: '/api/mixtape/{public_id}';
};

export type GetMixtapeApiMixtapePublicIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMixtapeApiMixtapePublicIdGetError = GetMixtapeApiMixtapePublicIdGetErrors[keyof GetMixtapeApiMixtapePublicIdGetErrors];

export type GetMixtapeApiMixtapePublicIdGetResponses = {
    /**
     * Successful Response
     */
    200: MixtapeResponse;
};

export type GetMixtapeApiMixtapePublicIdGetResponse = GetMixtapeApiMixtapePublicIdGetResponses[keyof GetMixtapeApiMixtapePublicIdGetResponses];

export type UpdateMixtapeApiMixtapePublicIdPutData = {
    body: MixtapeRequest;
    path: {
        /**
         * Public Id
         */
        public_id: string;
    };
    query?: never;
    url: '/api/mixtape/{public_id}';
};

export type UpdateMixtapeApiMixtapePublicIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateMixtapeApiMixtapePublicIdPutError = UpdateMixtapeApiMixtapePublicIdPutErrors[keyof UpdateMixtapeApiMixtapePublicIdPutErrors];

export type UpdateMixtapeApiMixtapePublicIdPutResponses = {
    /**
     * Response Update Mixtape Api Mixtape  Public Id  Put
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type UpdateMixtapeApiMixtapePublicIdPutResponse = UpdateMixtapeApiMixtapePublicIdPutResponses[keyof UpdateMixtapeApiMixtapePublicIdPutResponses];

export type UndoMixtapeApiMixtapePublicIdUndoPostData = {
    body?: never;
    path: {
        /**
         * Public Id
         */
        public_id: string;
    };
    query?: never;
    url: '/api/mixtape/{public_id}/undo';
};

export type UndoMixtapeApiMixtapePublicIdUndoPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UndoMixtapeApiMixtapePublicIdUndoPostError = UndoMixtapeApiMixtapePublicIdUndoPostErrors[keyof UndoMixtapeApiMixtapePublicIdUndoPostErrors];

export type UndoMixtapeApiMixtapePublicIdUndoPostResponses = {
    /**
     * Successful Response
     */
    200: MixtapeResponse;
};

export type UndoMixtapeApiMixtapePublicIdUndoPostResponse = UndoMixtapeApiMixtapePublicIdUndoPostResponses[keyof UndoMixtapeApiMixtapePublicIdUndoPostResponses];

export type RedoMixtapeApiMixtapePublicIdRedoPostData = {
    body?: never;
    path: {
        /**
         * Public Id
         */
        public_id: string;
    };
    query?: never;
    url: '/api/mixtape/{public_id}/redo';
};

export type RedoMixtapeApiMixtapePublicIdRedoPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RedoMixtapeApiMixtapePublicIdRedoPostError = RedoMixtapeApiMixtapePublicIdRedoPostErrors[keyof RedoMixtapeApiMixtapePublicIdRedoPostErrors];

export type RedoMixtapeApiMixtapePublicIdRedoPostResponses = {
    /**
     * Successful Response
     */
    200: MixtapeResponse;
};

export type RedoMixtapeApiMixtapePublicIdRedoPostResponse = RedoMixtapeApiMixtapePublicIdRedoPostResponses[keyof RedoMixtapeApiMixtapePublicIdRedoPostResponses];

export type RootApiGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/';
};

export type RootApiGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DebugApiDebugGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/debug';
};

export type DebugApiDebugGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: `${string}://openapi.gen.json` | (string & {});
};