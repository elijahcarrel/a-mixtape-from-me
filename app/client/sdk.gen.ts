// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetCurrentUserApiAuthMeGetData, GetCurrentUserApiAuthMeGetResponses, LogoutApiAuthLogoutPostData, LogoutApiAuthLogoutPostResponses, VerifyTokenApiAuthVerifyGetData, VerifyTokenApiAuthVerifyGetResponses, GetAccountApiAccountMeGetData, GetAccountApiAccountMeGetResponses, DbApiHealthDbGetData, DbApiHealthDbGetResponses, AppHealthApiHealthAppGetData, AppHealthApiHealthAppGetResponses, SearchTracksApiSpotifySearchGetData, SearchTracksApiSpotifySearchGetResponses, SearchTracksApiSpotifySearchGetErrors, GetTrackApiSpotifyTrackTrackIdGetData, GetTrackApiSpotifyTrackTrackIdGetResponses, GetTrackApiSpotifyTrackTrackIdGetErrors, ListMyMixtapesApiMixtapeGetData, ListMyMixtapesApiMixtapeGetResponses, ListMyMixtapesApiMixtapeGetErrors, CreateMixtapeApiMixtapePostData, CreateMixtapeApiMixtapePostResponses, CreateMixtapeApiMixtapePostErrors, ClaimMixtapeApiMixtapePublicIdClaimPostData, ClaimMixtapeApiMixtapePublicIdClaimPostResponses, ClaimMixtapeApiMixtapePublicIdClaimPostErrors, GetMixtapeApiMixtapePublicIdGetData, GetMixtapeApiMixtapePublicIdGetResponses, GetMixtapeApiMixtapePublicIdGetErrors, UpdateMixtapeApiMixtapePublicIdPutData, UpdateMixtapeApiMixtapePublicIdPutResponses, UpdateMixtapeApiMixtapePublicIdPutErrors, UndoMixtapeApiMixtapePublicIdUndoPostData, UndoMixtapeApiMixtapePublicIdUndoPostResponses, UndoMixtapeApiMixtapePublicIdUndoPostErrors, RedoMixtapeApiMixtapePublicIdRedoPostData, RedoMixtapeApiMixtapePublicIdRedoPostResponses, RedoMixtapeApiMixtapePublicIdRedoPostErrors, RootApiGetData, RootApiGetResponses, DebugApiDebugGetData, DebugApiDebugGetResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Current User
 * Get current user information from Stack Auth token
 */
export const getCurrentUserApiAuthMeGet = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentUserApiAuthMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentUserApiAuthMeGetResponses, unknown, ThrowOnError>({
        url: '/api/auth/me',
        ...options
    });
};

/**
 * Logout
 * Logout the current user (clear cache)
 */
export const logoutApiAuthLogoutPost = <ThrowOnError extends boolean = false>(options?: Options<LogoutApiAuthLogoutPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LogoutApiAuthLogoutPostResponses, unknown, ThrowOnError>({
        url: '/api/auth/logout',
        ...options
    });
};

/**
 * Verify Token
 * Verify if the provided token is valid
 */
export const verifyTokenApiAuthVerifyGet = <ThrowOnError extends boolean = false>(options?: Options<VerifyTokenApiAuthVerifyGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VerifyTokenApiAuthVerifyGetResponses, unknown, ThrowOnError>({
        url: '/api/auth/verify',
        ...options
    });
};

/**
 * Get Account
 * Get current user account information
 */
export const getAccountApiAccountMeGet = <ThrowOnError extends boolean = false>(options?: Options<GetAccountApiAccountMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAccountApiAccountMeGetResponses, unknown, ThrowOnError>({
        url: '/api/account/me',
        ...options
    });
};

/**
 * Db
 */
export const dbApiHealthDbGet = <ThrowOnError extends boolean = false>(options?: Options<DbApiHealthDbGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DbApiHealthDbGetResponses, unknown, ThrowOnError>({
        url: '/api/health/db',
        ...options
    });
};

/**
 * App Health
 */
export const appHealthApiHealthAppGet = <ThrowOnError extends boolean = false>(options?: Options<AppHealthApiHealthAppGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppHealthApiHealthAppGetResponses, unknown, ThrowOnError>({
        url: '/api/health/app',
        ...options
    });
};

/**
 * Search Tracks
 * Search for tracks using service account credentials
 */
export const searchTracksApiSpotifySearchGet = <ThrowOnError extends boolean = false>(options: Options<SearchTracksApiSpotifySearchGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchTracksApiSpotifySearchGetResponses, SearchTracksApiSpotifySearchGetErrors, ThrowOnError>({
        url: '/api/spotify/search',
        ...options
    });
};

/**
 * Get Track
 * Get track details using service account credentials
 */
export const getTrackApiSpotifyTrackTrackIdGet = <ThrowOnError extends boolean = false>(options: Options<GetTrackApiSpotifyTrackTrackIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTrackApiSpotifyTrackTrackIdGetResponses, GetTrackApiSpotifyTrackTrackIdGetErrors, ThrowOnError>({
        url: '/api/spotify/track/{track_id}',
        ...options
    });
};

/**
 * List My Mixtapes
 * Lists all mixtapes owned by the current user, taking into account the specified query parameters.
 * Does not return the entire mixtape, just an overview.
 */
export const listMyMixtapesApiMixtapeGet = <ThrowOnError extends boolean = false>(options?: Options<ListMyMixtapesApiMixtapeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListMyMixtapesApiMixtapeGetResponses, ListMyMixtapesApiMixtapeGetErrors, ThrowOnError>({
        url: '/api/mixtape',
        ...options
    });
};

/**
 * Create Mixtape
 * Creates a new mixtape (with tracks).
 * If user is authenticated, the mixtape will be associated with them. If not, it
 * will remain an anonymous mixtape.
 * Returns the mixtape's generated public ID.
 * TODO: rethink the return value (maybe make an explicit for it?)
 */
export const createMixtapeApiMixtapePost = <ThrowOnError extends boolean = false>(options: Options<CreateMixtapeApiMixtapePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateMixtapeApiMixtapePostResponses, CreateMixtapeApiMixtapePostErrors, ThrowOnError>({
        url: '/api/mixtape',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Claim Mixtape
 * Claim an anonymous mixtape, making the authenticated user the owner.
 */
export const claimMixtapeApiMixtapePublicIdClaimPost = <ThrowOnError extends boolean = false>(options: Options<ClaimMixtapeApiMixtapePublicIdClaimPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ClaimMixtapeApiMixtapePublicIdClaimPostResponses, ClaimMixtapeApiMixtapePublicIdClaimPostErrors, ThrowOnError>({
        url: '/api/mixtape/{public_id}/claim',
        ...options
    });
};

/**
 * Get Mixtape
 * Gets the mixtape with the given public ID.
 */
export const getMixtapeApiMixtapePublicIdGet = <ThrowOnError extends boolean = false>(options: Options<GetMixtapeApiMixtapePublicIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMixtapeApiMixtapePublicIdGetResponses, GetMixtapeApiMixtapePublicIdGetErrors, ThrowOnError>({
        url: '/api/mixtape/{public_id}',
        ...options
    });
};

/**
 * Update Mixtape
 * Updates the mixtape with the given ID.
 * Returns the new mixtape version.
 * TODO: rethink the return value.
 */
export const updateMixtapeApiMixtapePublicIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateMixtapeApiMixtapePublicIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMixtapeApiMixtapePublicIdPutResponses, UpdateMixtapeApiMixtapePublicIdPutErrors, ThrowOnError>({
        url: '/api/mixtape/{public_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Undo Mixtape
 * Undo the last action on a mixtape, restoring it to a previous version.
 *
 * This endpoint implements undo functionality by:
 * 1. Loading the target version from the snapshot history
 * 2. Restoring the mixtape and tracks to that previous state
 * 3. Updating the undo/redo pointers to maintain the version chain
 * 4. Breaking the redo chain (since a new edit would create a new branch)
 *
 * The undo operation follows the doubly-linked list structure stored in the
 * mixtape_snapshot table, where each version points to its undo/redo targets.
 *
 * Args:
 * public_id: The public identifier of the mixtape to undo
 * session: Database session with write access
 * authenticated_user: Optional authenticated user (required for private mixtapes)
 * spotify_client: Spotify client for enriching track details
 *
 * Returns:
 * MixtapeResponse: The restored mixtape with updated can_undo/can_redo flags
 *
 * Raises:
 * HTTPException 400: If the mixtape cannot be undone (no previous version)
 * HTTPException 401: If the mixtape is private and user lacks authorization
 * HTTPException 404: If the mixtape doesn't exist
 * HTTPException 500: If the target version snapshot cannot be found
 */
export const undoMixtapeApiMixtapePublicIdUndoPost = <ThrowOnError extends boolean = false>(options: Options<UndoMixtapeApiMixtapePublicIdUndoPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UndoMixtapeApiMixtapePublicIdUndoPostResponses, UndoMixtapeApiMixtapePublicIdUndoPostErrors, ThrowOnError>({
        url: '/api/mixtape/{public_id}/undo',
        ...options
    });
};

/**
 * Redo Mixtape
 * Redo the last undone action on a mixtape, restoring it to a later version.
 *
 * This endpoint implements redo functionality by:
 * 1. Loading the target version from the snapshot history
 * 2. Restoring the mixtape and tracks to that later state
 * 3. Updating the undo/redo pointers to maintain the version chain
 * 4. Preserving the ability to undo back to the current version
 *
 * The redo operation follows the doubly-linked list structure stored in the
 * mixtape_snapshot table, where each version points to its undo/redo targets.
 * Redo is only available after an undo operation and before any new edits.
 *
 * Args:
 * public_id: The public identifier of the mixtape to redo
 * session: Database session with write access
 * authenticated_user: Optional authenticated user (required for private mixtapes)
 * spotify_client: Spotify client for enriching track details
 *
 * Returns:
 * MixtapeResponse: The restored mixtape with updated can_undo/can_redo flags
 *
 * Raises:
 * HTTPException 400: If the mixtape cannot be redone (no later version)
 * HTTPException 401: If the mixtape is private and user lacks authorization
 * HTTPException 404: If the mixtape doesn't exist
 * HTTPException 500: If the target version snapshot cannot be found
 */
export const redoMixtapeApiMixtapePublicIdRedoPost = <ThrowOnError extends boolean = false>(options: Options<RedoMixtapeApiMixtapePublicIdRedoPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RedoMixtapeApiMixtapePublicIdRedoPostResponses, RedoMixtapeApiMixtapePublicIdRedoPostErrors, ThrowOnError>({
        url: '/api/mixtape/{public_id}/redo',
        ...options
    });
};

/**
 * Root
 */
export const rootApiGet = <ThrowOnError extends boolean = false>(options?: Options<RootApiGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RootApiGetResponses, unknown, ThrowOnError>({
        url: '/api/',
        ...options
    });
};

/**
 * Debug
 */
export const debugApiDebugGet = <ThrowOnError extends boolean = false>(options?: Options<DebugApiDebugGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DebugApiDebugGetResponses, unknown, ThrowOnError>({
        url: '/api/debug',
        ...options
    });
};