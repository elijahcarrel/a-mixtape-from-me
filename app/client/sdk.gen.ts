// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetCurrentUserApiMainAuthMeGetData, GetCurrentUserApiMainAuthMeGetResponses, LogoutApiMainAuthLogoutPostData, LogoutApiMainAuthLogoutPostResponses, VerifyTokenApiMainAuthVerifyGetData, VerifyTokenApiMainAuthVerifyGetResponses, GetAccountApiMainAccountMeGetData, GetAccountApiMainAccountMeGetResponses, GetProfileApiMainAccountProfileGetData, GetProfileApiMainAccountProfileGetResponses, DbApiMainHealthDbGetData, DbApiMainHealthDbGetResponses, AppHealthApiMainHealthAppGetData, AppHealthApiMainHealthAppGetResponses, SearchTracksApiMainSpotifySearchGetData, SearchTracksApiMainSpotifySearchGetResponses, SearchTracksApiMainSpotifySearchGetErrors, GetTrackApiMainSpotifyTrackTrackIdGetData, GetTrackApiMainSpotifyTrackTrackIdGetResponses, GetTrackApiMainSpotifyTrackTrackIdGetErrors, ListMyMixtapesApiMainMixtapeGetData, ListMyMixtapesApiMainMixtapeGetResponses, ListMyMixtapesApiMainMixtapeGetErrors, CreateMixtapeApiMainMixtapePostData, CreateMixtapeApiMainMixtapePostResponses, CreateMixtapeApiMainMixtapePostErrors, ClaimMixtapeApiMainMixtapePublicIdClaimPostData, ClaimMixtapeApiMainMixtapePublicIdClaimPostResponses, ClaimMixtapeApiMainMixtapePublicIdClaimPostErrors, GetMixtapeApiMainMixtapePublicIdGetData, GetMixtapeApiMainMixtapePublicIdGetResponses, GetMixtapeApiMainMixtapePublicIdGetErrors, UpdateMixtapeApiMainMixtapePublicIdPutData, UpdateMixtapeApiMainMixtapePublicIdPutResponses, UpdateMixtapeApiMainMixtapePublicIdPutErrors, RootApiMainGetData, RootApiMainGetResponses, DebugApiMainDebugGetData, DebugApiMainDebugGetResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Current User
 * Get current user information from Stack Auth token
 */
export const getCurrentUserApiMainAuthMeGet = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentUserApiMainAuthMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentUserApiMainAuthMeGetResponses, unknown, ThrowOnError>({
        url: '/api/auth/me',
        ...options
    });
};

/**
 * Logout
 * Logout the current user (clear cache)
 */
export const logoutApiMainAuthLogoutPost = <ThrowOnError extends boolean = false>(options?: Options<LogoutApiMainAuthLogoutPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LogoutApiMainAuthLogoutPostResponses, unknown, ThrowOnError>({
        url: '/api/auth/logout',
        ...options
    });
};

/**
 * Verify Token
 * Verify if the provided token is valid
 */
export const verifyTokenApiMainAuthVerifyGet = <ThrowOnError extends boolean = false>(options?: Options<VerifyTokenApiMainAuthVerifyGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VerifyTokenApiMainAuthVerifyGetResponses, unknown, ThrowOnError>({
        url: '/api/auth/verify',
        ...options
    });
};

/**
 * Get Account
 * Get current user account information
 */
export const getAccountApiMainAccountMeGet = <ThrowOnError extends boolean = false>(options?: Options<GetAccountApiMainAccountMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAccountApiMainAccountMeGetResponses, unknown, ThrowOnError>({
        url: '/api/account/me',
        ...options
    });
};

/**
 * Get Profile
 * Get user profile information
 */
export const getProfileApiMainAccountProfileGet = <ThrowOnError extends boolean = false>(options?: Options<GetProfileApiMainAccountProfileGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProfileApiMainAccountProfileGetResponses, unknown, ThrowOnError>({
        url: '/api/account/profile',
        ...options
    });
};

/**
 * Db
 */
export const dbApiMainHealthDbGet = <ThrowOnError extends boolean = false>(options?: Options<DbApiMainHealthDbGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DbApiMainHealthDbGetResponses, unknown, ThrowOnError>({
        url: '/api/health/db',
        ...options
    });
};

/**
 * App Health
 */
export const appHealthApiMainHealthAppGet = <ThrowOnError extends boolean = false>(options?: Options<AppHealthApiMainHealthAppGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppHealthApiMainHealthAppGetResponses, unknown, ThrowOnError>({
        url: '/api/health/app',
        ...options
    });
};

/**
 * Search Tracks
 * Search for tracks using service account credentials
 */
export const searchTracksApiMainSpotifySearchGet = <ThrowOnError extends boolean = false>(options: Options<SearchTracksApiMainSpotifySearchGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchTracksApiMainSpotifySearchGetResponses, SearchTracksApiMainSpotifySearchGetErrors, ThrowOnError>({
        url: '/api/spotify/search',
        ...options
    });
};

/**
 * Get Track
 * Get track details using service account credentials
 */
export const getTrackApiMainSpotifyTrackTrackIdGet = <ThrowOnError extends boolean = false>(options: Options<GetTrackApiMainSpotifyTrackTrackIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTrackApiMainSpotifyTrackTrackIdGetResponses, GetTrackApiMainSpotifyTrackTrackIdGetErrors, ThrowOnError>({
        url: '/api/spotify/track/{track_id}',
        ...options
    });
};

/**
 * List My Mixtapes
 */
export const listMyMixtapesApiMainMixtapeGet = <ThrowOnError extends boolean = false>(options?: Options<ListMyMixtapesApiMainMixtapeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListMyMixtapesApiMainMixtapeGetResponses, ListMyMixtapesApiMainMixtapeGetErrors, ThrowOnError>({
        url: '/api/mixtape/',
        ...options
    });
};

/**
 * Create Mixtape
 */
export const createMixtapeApiMainMixtapePost = <ThrowOnError extends boolean = false>(options: Options<CreateMixtapeApiMainMixtapePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateMixtapeApiMainMixtapePostResponses, CreateMixtapeApiMainMixtapePostErrors, ThrowOnError>({
        url: '/api/mixtape/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Claim Mixtape
 * Claim an anonymous mixtape, making the authenticated user the owner.
 */
export const claimMixtapeApiMainMixtapePublicIdClaimPost = <ThrowOnError extends boolean = false>(options: Options<ClaimMixtapeApiMainMixtapePublicIdClaimPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ClaimMixtapeApiMainMixtapePublicIdClaimPostResponses, ClaimMixtapeApiMainMixtapePublicIdClaimPostErrors, ThrowOnError>({
        url: '/api/mixtape/{public_id}/claim',
        ...options
    });
};

/**
 * Get Mixtape
 */
export const getMixtapeApiMainMixtapePublicIdGet = <ThrowOnError extends boolean = false>(options: Options<GetMixtapeApiMainMixtapePublicIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMixtapeApiMainMixtapePublicIdGetResponses, GetMixtapeApiMainMixtapePublicIdGetErrors, ThrowOnError>({
        url: '/api/mixtape/{public_id}',
        ...options
    });
};

/**
 * Update Mixtape
 */
export const updateMixtapeApiMainMixtapePublicIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateMixtapeApiMainMixtapePublicIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMixtapeApiMainMixtapePublicIdPutResponses, UpdateMixtapeApiMainMixtapePublicIdPutErrors, ThrowOnError>({
        url: '/api/mixtape/{public_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Root
 */
export const rootApiMainGet = <ThrowOnError extends boolean = false>(options?: Options<RootApiMainGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RootApiMainGetResponses, unknown, ThrowOnError>({
        url: '/api/',
        ...options
    });
};

/**
 * Debug
 */
export const debugApiMainDebugGet = <ThrowOnError extends boolean = false>(options?: Options<DebugApiMainDebugGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DebugApiMainDebugGetResponses, unknown, ThrowOnError>({
        url: '/api/debug',
        ...options
    });
};