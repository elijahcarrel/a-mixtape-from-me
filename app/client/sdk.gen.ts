// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetCurrentUserApiAuthMeGetData, GetCurrentUserApiAuthMeGetResponses, LogoutApiAuthLogoutPostData, LogoutApiAuthLogoutPostResponses, VerifyTokenApiAuthVerifyGetData, VerifyTokenApiAuthVerifyGetResponses, GetAccountApiAccountMeGetData, GetAccountApiAccountMeGetResponses, GetProfileApiAccountProfileGetData, GetProfileApiAccountProfileGetResponses, DbApiHealthDbGetData, DbApiHealthDbGetResponses, AppHealthApiHealthAppGetData, AppHealthApiHealthAppGetResponses, SearchTracksApiSpotifySearchGetData, SearchTracksApiSpotifySearchGetResponses, SearchTracksApiSpotifySearchGetErrors, GetTrackApiSpotifyTrackTrackIdGetData, GetTrackApiSpotifyTrackTrackIdGetResponses, GetTrackApiSpotifyTrackTrackIdGetErrors, ListMyMixtapesApiMixtapeGetData, ListMyMixtapesApiMixtapeGetResponses, ListMyMixtapesApiMixtapeGetErrors, CreateMixtapeApiMixtapePostData, CreateMixtapeApiMixtapePostResponses, CreateMixtapeApiMixtapePostErrors, ClaimMixtapeApiMixtapePublicIdClaimPostData, ClaimMixtapeApiMixtapePublicIdClaimPostResponses, ClaimMixtapeApiMixtapePublicIdClaimPostErrors, GetMixtapeApiMixtapePublicIdGetData, GetMixtapeApiMixtapePublicIdGetResponses, GetMixtapeApiMixtapePublicIdGetErrors, UpdateMixtapeApiMixtapePublicIdPutData, UpdateMixtapeApiMixtapePublicIdPutResponses, UpdateMixtapeApiMixtapePublicIdPutErrors, ExportMixtapeToSpotifyApiMixtapePublicIdSpotifyExportPostData, ExportMixtapeToSpotifyApiMixtapePublicIdSpotifyExportPostResponses, ExportMixtapeToSpotifyApiMixtapePublicIdSpotifyExportPostErrors, RootApiGetData, RootApiGetResponses, DebugApiDebugGetData, DebugApiDebugGetResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Current User
 * Get current user information from Stack Auth token
 */
export const getCurrentUserApiAuthMeGet = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentUserApiAuthMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentUserApiAuthMeGetResponses, unknown, ThrowOnError>({
        url: '/api/auth/me',
        ...options
    });
};

/**
 * Logout
 * Logout the current user (clear cache)
 */
export const logoutApiAuthLogoutPost = <ThrowOnError extends boolean = false>(options?: Options<LogoutApiAuthLogoutPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LogoutApiAuthLogoutPostResponses, unknown, ThrowOnError>({
        url: '/api/auth/logout',
        ...options
    });
};

/**
 * Verify Token
 * Verify if the provided token is valid
 */
export const verifyTokenApiAuthVerifyGet = <ThrowOnError extends boolean = false>(options?: Options<VerifyTokenApiAuthVerifyGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VerifyTokenApiAuthVerifyGetResponses, unknown, ThrowOnError>({
        url: '/api/auth/verify',
        ...options
    });
};

/**
 * Get Account
 * Get current user account information
 */
export const getAccountApiAccountMeGet = <ThrowOnError extends boolean = false>(options?: Options<GetAccountApiAccountMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAccountApiAccountMeGetResponses, unknown, ThrowOnError>({
        url: '/api/account/me',
        ...options
    });
};

/**
 * Get Profile
 * Get user profile information
 */
export const getProfileApiAccountProfileGet = <ThrowOnError extends boolean = false>(options?: Options<GetProfileApiAccountProfileGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProfileApiAccountProfileGetResponses, unknown, ThrowOnError>({
        url: '/api/account/profile',
        ...options
    });
};

/**
 * Db
 */
export const dbApiHealthDbGet = <ThrowOnError extends boolean = false>(options?: Options<DbApiHealthDbGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DbApiHealthDbGetResponses, unknown, ThrowOnError>({
        url: '/api/health/db',
        ...options
    });
};

/**
 * App Health
 */
export const appHealthApiHealthAppGet = <ThrowOnError extends boolean = false>(options?: Options<AppHealthApiHealthAppGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppHealthApiHealthAppGetResponses, unknown, ThrowOnError>({
        url: '/api/health/app',
        ...options
    });
};

/**
 * Search Tracks
 * Search for tracks using service account credentials
 */
export const searchTracksApiSpotifySearchGet = <ThrowOnError extends boolean = false>(options: Options<SearchTracksApiSpotifySearchGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchTracksApiSpotifySearchGetResponses, SearchTracksApiSpotifySearchGetErrors, ThrowOnError>({
        url: '/api/spotify/search',
        ...options
    });
};

/**
 * Get Track
 * Get track details using service account credentials
 */
export const getTrackApiSpotifyTrackTrackIdGet = <ThrowOnError extends boolean = false>(options: Options<GetTrackApiSpotifyTrackTrackIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTrackApiSpotifyTrackTrackIdGetResponses, GetTrackApiSpotifyTrackTrackIdGetErrors, ThrowOnError>({
        url: '/api/spotify/track/{track_id}',
        ...options
    });
};

/**
 * List My Mixtapes
 */
export const listMyMixtapesApiMixtapeGet = <ThrowOnError extends boolean = false>(options?: Options<ListMyMixtapesApiMixtapeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListMyMixtapesApiMixtapeGetResponses, ListMyMixtapesApiMixtapeGetErrors, ThrowOnError>({
        url: '/api/mixtape',
        ...options
    });
};

/**
 * Create Mixtape
 */
export const createMixtapeApiMixtapePost = <ThrowOnError extends boolean = false>(options: Options<CreateMixtapeApiMixtapePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateMixtapeApiMixtapePostResponses, CreateMixtapeApiMixtapePostErrors, ThrowOnError>({
        url: '/api/mixtape',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Claim Mixtape
 * Claim an anonymous mixtape, making the authenticated user the owner.
 */
export const claimMixtapeApiMixtapePublicIdClaimPost = <ThrowOnError extends boolean = false>(options: Options<ClaimMixtapeApiMixtapePublicIdClaimPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ClaimMixtapeApiMixtapePublicIdClaimPostResponses, ClaimMixtapeApiMixtapePublicIdClaimPostErrors, ThrowOnError>({
        url: '/api/mixtape/{public_id}/claim',
        ...options
    });
};

/**
 * Get Mixtape
 */
export const getMixtapeApiMixtapePublicIdGet = <ThrowOnError extends boolean = false>(options: Options<GetMixtapeApiMixtapePublicIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMixtapeApiMixtapePublicIdGetResponses, GetMixtapeApiMixtapePublicIdGetErrors, ThrowOnError>({
        url: '/api/mixtape/{public_id}',
        ...options
    });
};

/**
 * Update Mixtape
 */
export const updateMixtapeApiMixtapePublicIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateMixtapeApiMixtapePublicIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMixtapeApiMixtapePublicIdPutResponses, UpdateMixtapeApiMixtapePublicIdPutErrors, ThrowOnError>({
        url: '/api/mixtape/{public_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Export Mixtape To Spotify
 * Create or update a Spotify playlist representing this mixtape and return the mixtape data.
 */
export const exportMixtapeToSpotifyApiMixtapePublicIdSpotifyExportPost = <ThrowOnError extends boolean = false>(options: Options<ExportMixtapeToSpotifyApiMixtapePublicIdSpotifyExportPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ExportMixtapeToSpotifyApiMixtapePublicIdSpotifyExportPostResponses, ExportMixtapeToSpotifyApiMixtapePublicIdSpotifyExportPostErrors, ThrowOnError>({
        url: '/api/mixtape/{public_id}/spotify-export',
        ...options
    });
};

/**
 * Root
 */
export const rootApiGet = <ThrowOnError extends boolean = false>(options?: Options<RootApiGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RootApiGetResponses, unknown, ThrowOnError>({
        url: '/api/',
        ...options
    });
};

/**
 * Debug
 */
export const debugApiDebugGet = <ThrowOnError extends boolean = false>(options?: Options<DebugApiDebugGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DebugApiDebugGetResponses, unknown, ThrowOnError>({
        url: '/api/debug',
        ...options
    });
};