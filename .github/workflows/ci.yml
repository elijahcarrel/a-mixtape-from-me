name: CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  frontend-typecheck:
    name: Front-End Type Check (tsc)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install dependencies
        run: npm ci
      - name: Type Check
        run: npm run frontend-typecheck

  frontend-eslint:
    name: Front-End Lint (eslint)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run frontend-lint

  frontend-prettier-format:
    name: Front-End Format (prettier)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install dependencies
        run: npm ci
      - name: Check Prettier formatting
        run: npm run frontend-format

  frontend-jest-tests:
    name: Front-End Tests (jest)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install dependencies
        run: npm ci
      - name: Run Jest tests
        run: npm run frontend-test

  backend-pytest-tests:
    name: Backend Tests (pytest)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-postgresql
          pip install -e .
      - name: Run Pytest
        run: pytest backend/tests

  backend-ruff-lint:
    name: Backend Lint (ruff)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
      - name: Run Ruff
        run: ruff check backend/

  backend-mypy-typecheck:
    name: Backend Type Check (mypy)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
      - name: Run MyPy
        run: mypy backend/

  validate-db-schema:
    name: Validate schema.gen.sql Up-To-Date
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install sqlmodel sqlalchemy
      - name: Install Atlas
        run: |
          curl -sSf https://atlasgo.sh | sh
          echo "export PATH=\"$HOME/.atlas/bin:$PATH\"" >> $GITHUB_ENV
      - name: Generate new schema.gen.sql
        run: |
          mkdir -p tmp
          python scripts/generate_schema.py --output tmp/generated_schema.gen.sql
      - name: Compare checked-in schema.gen.sql to generated schema.gen.sql
        run: |
          output=$(atlas schema diff \
            --from file://$(pwd)/schema.gen.sql \
            --to file://$(pwd)/tmp/generated_schema.gen.sql \
            --dev-url "docker://postgres/15/dev")
          if [ "$output" != "Schemas are synced, no changes to be made." ]; then
            echo 'schema.gen.sql is not up to date with the models. Please run scripts/generate_schema.py and commit the result.'
            echo "$output"
            exit 1
          fi

  validate-openapi-schema:
    name: Validate openapi.gen.json Up-To-Date
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install fastapi
      - name: Generate new openapi.gen.json
        run: |
          mkdir -p tmp
          python scripts/generate_openapi_spec.py --output tmp/openapi.gen.json --format json --strip-modern-openapi-incompatibilities
      - name: Strip OpenAPI 3.1.0 incompatibilities from both files
        run: |
          python scripts/strip_openapi_incompatibilities.py openapi.gen.json tmp/openapi_clean.json
          python scripts/strip_openapi_incompatibilities.py tmp/openapi.gen.json tmp/openapi_generated_clean.json
      - name: Run OpenAPI spec diff action
        uses: oasdiff/oasdiff-action/diff@main
        with:
          base: 'tmp/openapi_clean.json'
          revision: 'tmp/openapi_generated_clean.json'
          format: 'text'
          output-to-file: 'diff.txt'
      - name: Check if diff has contents
        run: |
          if [ -s diff.txt ] && [ "$(cat diff.txt)" != "No changes" ]; then
            echo 'openapi.gen.json is not up to date with the OpenAPI specification. Please run scripts/generate_openapi_spec.py and commit the result.'
            cat diff.txt
            exit 1
          fi
